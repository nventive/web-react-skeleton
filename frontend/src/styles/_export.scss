@use "colors" as c;
@use "variables" as v;

/* ============================================
=                  Exports                    =
============================================ */

$_property: (gap);

$_property-with-direction: (
  m: margin,
  p: padding,
);

$_position: (top, bottom, left, right);

// Color
@each $colorKey, $colorValue in c.$color {
  @each $colorSubkey, $colorSubvalue in $colorValue {
    #body .color-#{$colorKey}-#{$colorSubkey} {
      color: $colorSubvalue;
    }
  }
}

// Background-color
@each $colorKey, $colorValue in c.$color {
  @each $colorSubkey, $colorSubvalue in $colorValue {
    #body .bg-#{$colorKey}-#{$colorSubkey} {
      background-color: $colorSubvalue;
    }
  }
}

// Property-spacing (eg: gap-xs -> gap: get-spacing(xs))
@each $propertyKey in $_property {
  @each $spacingKey, $spacingValue in v.$spacing {
    #body .#{$propertyKey}-#{$spacingKey} {
      #{$propertyKey}: $spacingValue;
    }
  }
}

// Property with direction-spacing (eg: mr-xs -> margin-right: get-spacing(xs))
@each $propertyKey, $propertyValue in $_property-with-direction {
  @each $spacingKey, $spacingValue in v.$spacing {
    @each $directionKey, $directionValues in v.$direction {
      #body .#{$propertyKey}#{$directionKey}-#{$spacingKey} {
        @if $directionValues == all {
          #{$propertyValue}: $spacingValue;
        } @else {
          @each $directionValue in $directionValues {
            #{$propertyValue}-#{$directionValue}: $spacingValue;
          }
        }
      }
    }
  }
}

// Position-spacing (eg: top-xs -> top: get-spacing(xs))
@each $positionKey in $_position {
  @each $spacingKey, $spacingValue in v.$spacing {
    #body .#{$positionKey}-#{$spacingKey} {
      #{$positionKey}: $spacingValue;
    }
  }
}
